// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: lint_tasks_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addLintTask = `-- name: AddLintTask :exec
INSERT INTO lint_tasks
(lint_id, lint_status, linter_id, linter_docker_image, linter_docker_sha_hash, repo_id, repo_git_url, repo_git_commit_hash, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type AddLintTaskParams struct {
	LintID              string
	LintStatus          LintStatus
	LinterID            string
	LinterDockerImage   string
	LinterDockerShaHash string
	RepoID              string
	RepoGitUrl          string
	RepoGitCommitHash   string
	CreatedAt           pgtype.Timestamp
}

func (q *Queries) AddLintTask(ctx context.Context, arg AddLintTaskParams) error {
	_, err := q.db.Exec(ctx, addLintTask,
		arg.LintID,
		arg.LintStatus,
		arg.LinterID,
		arg.LinterDockerImage,
		arg.LinterDockerShaHash,
		arg.RepoID,
		arg.RepoGitUrl,
		arg.RepoGitCommitHash,
		arg.CreatedAt,
	)
	return err
}

const setLintTask = `-- name: SetLintTask :exec
UPDATE lint_tasks
SET lint_status         = $2,
    lint_status_comment = $3,
    lint_duration       = $4,
    linted_at           = $5,
    locked_at           = NULL
WHERE lint_id = $1
`

type SetLintTaskParams struct {
	LintID            string
	LintStatus        LintStatus
	LintStatusComment pgtype.Text
	LintDuration      pgtype.Interval
	LintedAt          pgtype.Timestamp
}

func (q *Queries) SetLintTask(ctx context.Context, arg SetLintTaskParams) error {
	_, err := q.db.Exec(ctx, setLintTask,
		arg.LintID,
		arg.LintStatus,
		arg.LintStatusComment,
		arg.LintDuration,
		arg.LintedAt,
	)
	return err
}

const tryTakeLintTask = `-- name: TryTakeLintTask :one
WITH available_tasks AS (SELECT lint_id,
    linter_id,
    linter_docker_image,
    linter_docker_sha_hash,
    repo_id,
    repo_git_url,
    repo_git_commit_hash,
    locked_at
    FROM lint_tasks t
    WHERE lint_status = 'pending'
    AND (t.locked_at IS NULL OR t.locked_at <= $2)
    ORDER BY created_at
    LIMIT 1 FOR UPDATE)
UPDATE lint_tasks as t
SET locked_at = $1
FROM available_tasks
WHERE t.lint_id = available_tasks.lint_id
    RETURNING
    t.lint_id,
    t.linter_id,
    t.linter_docker_image,
    t.linter_docker_sha_hash,
    t.repo_id,
    t.repo_git_url,
    t.repo_git_commit_hash
`

type TryTakeLintTaskParams struct {
	LockedAt           pgtype.Timestamp
	LockTimeLowerBound pgtype.Timestamp
}

type TryTakeLintTaskRow struct {
	LintID              string
	LinterID            string
	LinterDockerImage   string
	LinterDockerShaHash string
	RepoID              string
	RepoGitUrl          string
	RepoGitCommitHash   string
}

func (q *Queries) TryTakeLintTask(ctx context.Context, arg TryTakeLintTaskParams) (TryTakeLintTaskRow, error) {
	row := q.db.QueryRow(ctx, tryTakeLintTask, arg.LockedAt, arg.LockTimeLowerBound)
	var i TryTakeLintTaskRow
	err := row.Scan(
		&i.LintID,
		&i.LinterID,
		&i.LinterDockerImage,
		&i.LinterDockerShaHash,
		&i.RepoID,
		&i.RepoGitUrl,
		&i.RepoGitCommitHash,
	)
	return i, err
}
