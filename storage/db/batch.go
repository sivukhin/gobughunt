// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: batch.go

package db

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const addLintHighlight = `-- name: AddLintHighlight :batchexec
INSERT INTO lint_highlights (lint_id, path, start_line, end_line, explanation, snippet_start_line, snippet_end_line, snippet_code)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type AddLintHighlightBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type AddLintHighlightParams struct {
	LintID           string
	Path             string
	StartLine        int32
	EndLine          int32
	Explanation      string
	SnippetStartLine int32
	SnippetEndLine   int32
	SnippetCode      string
}

func (q *Queries) AddLintHighlight(ctx context.Context, arg []AddLintHighlightParams) *AddLintHighlightBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.LintID,
			a.Path,
			a.StartLine,
			a.EndLine,
			a.Explanation,
			a.SnippetStartLine,
			a.SnippetEndLine,
			a.SnippetCode,
		}
		batch.Queue(addLintHighlight, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &AddLintHighlightBatchResults{br, len(arg), false}
}

func (b *AddLintHighlightBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *AddLintHighlightBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
