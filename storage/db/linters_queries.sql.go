// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: linters_queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteLinter = `-- name: DeleteLinter :exec
DELETE FROM linters WHERE linter_id = $1
`

func (q *Queries) DeleteLinter(ctx context.Context, linterID string) error {
	_, err := q.db.Exec(ctx, deleteLinter, linterID)
	return err
}

const getLinter = `-- name: GetLinter :one
SELECT linter_id,
       linter_git_url,
       linter_git_branch,
       linter_last_docker_image,
       linter_last_docker_sha_hash
FROM linters
WHERE linter_id = $1
`

type GetLinterRow struct {
	LinterID                string
	LinterGitUrl            string
	LinterGitBranch         string
	LinterLastDockerImage   pgtype.Text
	LinterLastDockerShaHash pgtype.Text
}

func (q *Queries) GetLinter(ctx context.Context, linterID string) (GetLinterRow, error) {
	row := q.db.QueryRow(ctx, getLinter, linterID)
	var i GetLinterRow
	err := row.Scan(
		&i.LinterID,
		&i.LinterGitUrl,
		&i.LinterGitBranch,
		&i.LinterLastDockerImage,
		&i.LinterLastDockerShaHash,
	)
	return i, err
}

const listLinters = `-- name: ListLinters :many
SELECT linter_id,
       linter_git_url,
       linter_git_branch,
       linter_last_docker_image,
       linter_last_docker_sha_hash
FROM linters
ORDER BY updated_at DESC
`

type ListLintersRow struct {
	LinterID                string
	LinterGitUrl            string
	LinterGitBranch         string
	LinterLastDockerImage   pgtype.Text
	LinterLastDockerShaHash pgtype.Text
}

func (q *Queries) ListLinters(ctx context.Context) ([]ListLintersRow, error) {
	rows, err := q.db.Query(ctx, listLinters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLintersRow
	for rows.Next() {
		var i ListLintersRow
		if err := rows.Scan(
			&i.LinterID,
			&i.LinterGitUrl,
			&i.LinterGitBranch,
			&i.LinterLastDockerImage,
			&i.LinterLastDockerShaHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertLinter = `-- name: UpsertLinter :exec
INSERT INTO linters (linter_id, linter_git_url, linter_git_branch, linter_last_docker_image, linter_last_docker_sha_hash, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $6)
ON CONFLICT (linter_id)
    DO UPDATE SET linter_git_url              = $2,
    linter_git_branch           = $3,
    linter_last_docker_image    = $4,
    linter_last_docker_sha_hash = $5,
    updated_at                  = $6
`

type UpsertLinterParams struct {
	LinterID                string
	LinterGitUrl            string
	LinterGitBranch         string
	LinterLastDockerImage   pgtype.Text
	LinterLastDockerShaHash pgtype.Text
	CreatedAt               pgtype.Timestamp
}

func (q *Queries) UpsertLinter(ctx context.Context, arg UpsertLinterParams) error {
	_, err := q.db.Exec(ctx, upsertLinter,
		arg.LinterID,
		arg.LinterGitUrl,
		arg.LinterGitBranch,
		arg.LinterLastDockerImage,
		arg.LinterLastDockerShaHash,
		arg.CreatedAt,
	)
	return err
}
